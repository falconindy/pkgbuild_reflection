#!/bin/bash

usage() {
  printf '%s\n' \
      'mksrcinfo v@VERSION@' \
      '' \
      'mksrcinfo reads the target PKGBUILD and writes an equivalent .SRCINFO.' \
      'Without passing any arguments, mksrcinfo will read from $PWD/PKGBUILD' \
      'and write to $PWD/.SRCINFO.' \
      '' \
      'Usage: mksrcinfo [/path/to/pkgbuild]' \
      '    -h                display this help message and exit' \
      '    -o <file>         write output to <file>'
}

error() {
  printf "==> ERROR: $1\n" "${@:2}" >&2
}

die() {
  error "$@"
  exit 1
}

srcinfo_equal() {
  local left=$1 right=$2

  [[ -f $left && -f $right ]] || return 1

  # Strip comments and empty lines, then do a bytewise comparison on the
  # remainder. This means that reordering of metadata fields will cause
  # inequality, but changes in the comments (e.g. the generation timestamp)
  # will not.
  cmp -s <(grep -vE '^#|^$' "$left") <(grep -vE '^#|^$' "$right")
}

srcinfo_dest=$PWD/.SRCINFO
force_update=0

while getopts ':o:h' flag; do
  case $flag in
    o)
      srcinfo_dest=$OPTARG
      ;;
    :)
      die "option '-%s' requires an argument" "$OPTARG"
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      die "invalid option -- '-%s' (use -h for help)" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

srcinfo_tmp=$(mktemp --tmpdir srcinfo.XXXXXX)
trap 'rm "$srcinfo_tmp"' EXIT

pkgbuild=${1:-$PWD/PKGBUILD}
if (cd "${PKGBUILD%/*}"; makepkg -p "${pkgbuild##*/}" --printsrcinfo) \
  >"$srcinfo_tmp"; then
  if ! srcinfo_equal "$srcinfo_tmp" "$srcinfo_dest"; then
    # use cat rather than cp or move to handle cases where $srcinfo_dest isn't a
    # regular file (e.g. /dev/stdout).
    cat "$srcinfo_tmp" >"$srcinfo_dest"
  fi
fi

# vim: set et ts=2 sw=2:
